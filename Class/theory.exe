OPP's [OBJECT ORIENTED PROGRAMMING]
c++ supports object oriented programming system/concept

it is bottom to top approach

it have 4 pillars
1.Object and Class
2.Encapsulation
3.Abstaction
4.Inheritance

CLASS:
->Blueprint of an object is called Class.

->Real world entity which occupies space and having its own property is called Class

->collection of data and data members and member function is called Class

-> clas is a userdefined datatype
wont take any memory untill we made an object
by default it will take 1byte if we make any object and no data member or member function

Object:

->instance of a class is called an object

->object is real world entity

" . " member operator

cannot print/write any statement in class without functions 
without functions we cannot make classees

Access Modifier/Specifier
1.public
2.private
3.protcted

by default private

class class_name{
    data member
    member function
};

class class_name{
    datatype variable;
    public: datatype functionName(){
        statment/code
    }

};

int main(){
    class_name object_name;
    object_name.functionName;
}

TO DEFINE A FUNCTION OUTSIDE A CLASS
"
function_type(return/nonreturn) class_name ::(scope resolution) function_name"

STATIC: static member functions and static data members are attribute of class we use "static" keyword to define static member function and data member and we can access it without creating object -> saves memory->object not needed -> security is less -> can be used globally

static data members can in declared inside the class but cannot be assigned inside the class , we assign value to data member outside the class 

class class_name{
static int a;
static int b;

fnction()


};

int class_name::a=20;
int class_name::b=20;



IMPORTANT
"static data member and static member function is an attribute of a class while non static data members and non statric member function is an attribute of an object "

NOTE: whenever we call static member function we need not to create an object we can access with the name of class using scope resolution operator

static variable are shared not copied

static void fun_name(){

}

class_name::fun_name// access without object


"non static member function an data members are attribute of object-> can only be accessed with the help of object"

TYPES OF CLASSES:

1.Single Class: If a progarmm is having only one class is called single class
2.Multi Class: If a progarmm is having more than one class it is called as multi class
3.Anonymous class: A class without any name, and object need to be made write after the closing of class
4.Composite class : Composite class have an object of previous class and we call the function of previous class iside the member function of Composite class

Encapsulation:Wrapping of data is called Encapsulation

class follows water fall model of SDLC

CONSTRUCTOR: 1. it is called a special type of function 
2.constructor is used to  the allocate memory to the object
3.constructor dosent have any return type
4.by default the class have a constructor which belongs to public Specifier
5.calls impicitly

"if a class have more than one constructor with different parameter its called constructor overloading"

CONSTRUCTOR
    ->DEFAULT:syntax [public:class_name(){code/statement}]
    ->PARAMETERIZED: we use parameter in a function 
    ->COPY
        ->SHALLOW COPY:1.copies value of parameter to the variable of the class internally we use 'this->' keyword.
        2.copying data one object to  another object
        3.it is default and work internally
        
        ->DEEP COPY:use extra memory
        parameter should be name of class only
        secure
        and not shareable

This Pointer: is used when we have same name of variable and function parameter. shows that this variable belongs to current class

char c[20]: allocate memory in stack at design time
 and 
c=new char[20]: allocate memory in heap outside stack at run time

DESTRUCTOR:
used in releasing memory of allocated object, runs by default 

NOTE:
bottom - top approach? why??????????????
give priority to heap(object memory) and then stack in which main is
class top{
    top(){
        constructor
    }
}e;

main(){
    cout<<"hello"
}
here the object will give first priority as it will give priority to heap

class top(){
 top(){
    constructor
 }
};
int main(){
    cout<<"hello"
    top t1;
}
here first int main will run and hello will be print bcz we declared object after this 
"MAIN FUNCTION  ALWAYS WORK IN STACK"
main function will execute line by line as stack
and btw stack and heap priority is given to heap 


FRIEND FUNCTION AND FRIEND CLASS: we can access private data member and member function of a class eith freind function, security is less


OPERATOR OVERLOADING : all the operators are defined for primitive data types ,to make operator work on non primitive data type (like class etc)
we redfine operator to work on non primitive data type

"operator overloading is used for redfining the defination of multiple operator for non primitive datatype"
"it is used in redefining the nature of operator for non primitive data type"
"used to solve the complex data type"
there are two types of operator overloading
1.Unary operator overloading (non parameterized)
2.Binary operator overloading(parameterized)


INHERITANCE:
->less number of object(advantage)
-> first parent class memory get created
->first child memory got released
->less no of object but full memory get utilised
->object is should be of child class so that it can access members of both parent and child as object of parent class wont be able to access member of child 

1.singl :A->B // only two classes A->parent class B-> child class / derived class
if both class have function of same name it will give priority to the child class(drawback)


2.multiple :A->C<-B 
can inherit more than one class at the same time
"In a multiple Inheritance we can inherit more than one classes at a time "

Signature:same return type , same name,same parameter

"dimond problem arises when Signature is same "

3.multilevel: A->B->C

4.hierarchical: B->A<-C
                   ^
                   |
                   D  
all have same parrent class but not connected to one another we have to make different object for every class

showcase client server model 


5.Hybrid: A->B<-F->E<-D<-C